geom_segment(mapping=aes(y = country, yend = country, x = start, xend = end))
segs <- threads2 %>%
filter(disease == "African swine fever", !is.na(days)) %>%
arrange(country, start) %>%
group_by(country) %>%
mutate(tot_days = sum(days, na.rm = TRUE)) %>%
group_by() %>%
mutate(country = fct_reorder(country, tot_days))
ggplot(segs) +
geom_segment(mapping=aes(y = country, yend = country, x = start, xend = end))
?stat_jitter
ggplot(segs) +
geom_segment(mapping=aes(y = country, yend = country, x = start, xend = end),
position = position_jitter(width = 0, height = 0.2)) +
ggplot(segs) +
geom_segment(mapping=aes(y = country, yend = country, x = start, xend = end),
position = position_jitter(width = 0, height = 0.2))
ggplot(segs) +
geom_segment(mapping=aes(y = country, yend = country, x = start, xend = end),
position = position_jitter(width = 0, height = 0.2))
postion_jitter
position_jitter
ggplot(segs) +
geom_segment(mapping=aes(y = country, yend = country, x = start, xend = end))
View(outbreaks)
threads2 %>% filter(is.na(date_event_resolved))
outbreaks %>% filter(is.na(date_event_resolved))
outbreaks %>% count(date_event_resolved, sort=TRUE)
outbreaks %>% count(date_event_resolved == "NA")
outbreaks %>% filter(date_event_resolved == "NA")
outbreaks %>% filter(date_event_resolved == "NA") %>% View
outbreaks %>% filter(date_event_resolved == "NA") %>% count(future_reporting)
outbreak
outbreaks %>%
group_by(immediate_report) %>%
mutate(any_na_resolved = any(is.na(resolved))) %>%
group_by() %>%
filter(any_na_resolved)
outbreaks %>%
group_by(immediate_report) %>%
mutate(any_na_resolved = any(is.na(date_event_resolved))) %>%
group_by() %>%
filter(any_na_resolved)
outbreaks %>%
group_by(immediate_report) %>%
mutate(any_na_resolved = any(is.na(date_event_resolved)))
outbreaks %>%
group_by(immediate_report) %>%
mutate(any_na_resolved = any(is.na(date_event_resolved))) %>% View
outbreaks %>%
group_by(immediate_report) %>%
mutate(any_na_resolved = any(date_event_resolved == "NA")) %>%
group_by() %>%
filter(any_na_resolved)
outbreaks %>%
group_by(immediate_report) %>%
mutate(any_na_resolved = any(date_event_resolved == "NA")) %>%
group_by() %>%
filter(any_na_resolved) %>% View
outbreaks %>%
arrange(country, disease, immediate_report) %>%
group_by(immediate_report) %>%
mutate(any_na_resolved = any(date_event_resolved == "NA")) %>%
group_by() %>%
filter(any_na_resolved) %>% View
threads2
segs <- threads2 %>%
filter(disease == "African swine fever", !is.na(days)) %>%
arrange(country, start) %>%
group_by(country) %>%
mutate(tot_days = sum(days, na.rm = TRUE)) %>%
group_by() %>%
mutate(country = fct_reorder(country, tot_days)) %>%
group_by(country) %>%
mutate(ypos = as.integer(country) + if_else(n() > 1, runif(1, -0.25, 0.25), 0))
ggplot(segs) +
geom_segment(mapping=aes(y = country, yend = country, x = start, xend = end))
ggplot(segs, aes(x=start, y=country)) +
geom_segment(mapping=aes(y = ypos, yend = ypos, x = start, xend = end))
ggplot(segs, aes(x=start, y=country)) +
geom_segment(mapping=aes(y = ypos, yend = ypos, x = start, xend = end))
?geom_segment
segs
segs <- threads2 %>%
filter(disease == "African swine fever", !is.na(days)) %>%
arrange(country, start) %>%
group_by(country) %>%
mutate(tot_days = sum(days, na.rm = TRUE)) %>%
group_by() %>%
mutate(country = fct_reorder(country, tot_days)) %>%
group_by(country) %>%
mutate(ypos = as.integer(country) + if_else(n() > 1, runif(n(), -0.25, 0.25), 0))
ggplot(segs, aes(x=start, y=country)) +
geom_segment(mapping=aes(y = ypos, yend = ypos, x = start, xend = end))
segs <- threads2 %>%
filter(disease == "African swine fever", !is.na(days)) %>%
arrange(country, start) %>%
group_by(country) %>%
mutate(tot_days = sum(days, na.rm = TRUE)) %>%
group_by() %>%
mutate(country = fct_reorder(country, tot_days)) %>%
group_by(country) %>%
mutate(ypos = as.integer(country) + if_else(n() > 1, runif(n(), -0.25, 0.25), 0))
segs <- threads2 %>%
filter(disease == "African swine fever", !is.na(days)) %>%
arrange(country, start) %>%
group_by(country) %>%
mutate(tot_days = sum(days, na.rm = TRUE)) %>%
group_by() %>%
mutate(country = fct_reorder(country, tot_days)) %>%
group_by(country) %>%
mutate(ypos = as.integer(country) + if_else(n() > 1, runif(n(), -0.25, 0.25), rep(0, n())))
mutate(ypos = as.integer(country) + if_else(n_in_country > 1, runif(n(), -0.25, 0.25), 0))
segs <- threads2 %>%
filter(disease == "African swine fever", !is.na(days)) %>%
arrange(country, start) %>%
group_by(country) %>%
mutate(tot_days = sum(days, na.rm = TRUE)) %>%
group_by() %>%
mutate(country = fct_reorder(country, tot_days)) %>%
group_by(country) %>%
mutate(n_in_country = n()) %>%
group_by() %>%
mutate(ypos = as.integer(country) + if_else(n_in_country > 1, runif(n(), -0.25, 0.25), 0))
ggplot(segs, aes(x=start, y=country)) +
geom_segment(mapping=aes(y = ypos, yend = ypos, x = start, xend = end))
segs$country %>% levels
ggplot(segs, aes(x=start, y=country)) +
geom_segment(mapping=aes(y = ypos, yend = ypos, x = start, xend = end)) +
scale_y_continuous(labels = levels(segs$country))
(segs$country)
ggplot(segs, aes(x=start, y=country)) +
geom_segment(mapping=aes(y = ypos, yend = ypos, x = start, xend = end)) +
scale_y_continuous(breaks = 1:nlevels(segs$country), labels = levels(segs$country))
segs <- threads2 %>%
filter(disease == "African swine fever", !is.na(days)) %>%
arrange(country, start) %>%
group_by(country) %>%
mutate(tot_days = sum(days, na.rm = TRUE)) %>%
group_by() %>%
mutate(country = fct_reorder(country, tot_days)) %>%
group_by(country) %>%
mutate(n_in_country = n()) %>%
group_by() %>%
mutate(ypos = as.integer(country) + if_else(n_in_country > 1, runif(n(), -0.4, 0.4), 0))
ggplot(segs, aes(x=start, y=country)) +
geom_segment(mapping=aes(y = ypos, yend = ypos, x = start, xend = end)) +
scale_y_continuous(breaks = 1:nlevels(segs$country), labels = levels(segs$country))
segs <- threads2 %>%
filter(disease == "Bluetongue", !is.na(days)) %>%
arrange(country, start) %>%
group_by(country) %>%
mutate(tot_days = sum(days, na.rm = TRUE)) %>%
group_by() %>%
mutate(country = fct_reorder(country, tot_days)) %>%
group_by(country) %>%
mutate(n_in_country = n()) %>%
group_by() %>%
mutate(ypos = as.integer(country) + if_else(n_in_country > 1, runif(n(), -0.4, 0.4), 0))
ggplot(segs, aes(x=start, y=country)) +
geom_segment(mapping=aes(y = ypos, yend = ypos, x = start, xend = end)) +
scale_y_continuous(breaks = 1:nlevels(segs$country), labels = levels(segs$country))
outbreaks %>% filter(disease=="Bluetongue", country=="Italy")
outbreaks %>% filter(disease=="Bluetongue", country=="Italy") %>% View
outbreaks$epi_source %>% count()
outbreaks %>% count(epi_source)
outbreaks %>% count(epi_source, sort = TRUE)
outbreaks %>% count(epi_source, sort = TRUE) %>% View
outbreaks %>% count(epi_source, sort = TRUE) %>% print(n=30)
na.omit(outbreaks$epi_notes)
outbreaks[360,]
outbreaks[360,]$disease
outbreaks %>% filter(stri_detect_fixed(epi_notes, "depress"))
outbreaks %>% filter(stri_detect_fixed(epi_notes, "depress")) %>% pull(epi_notes)
library(wahis)
library(tidyverse)
library(stringi)
library(lubridate)
library(ggridges)
outbreaks %>%
arrange(country, disease, immediate_report) %>%
group_by(immediate_report) %>%
mutate(any_na_resolved = any(date_event_resolved == "NA")) %>%
group_by() %>%
filter(any_na_resolved) %>% View
outbreaks <- collect(tbl(wahis_db(), "outbreak_reports_events"))
library(wahis)
library(tidyverse)
library(stringi)
library(lubridate)
library(ggridges)
outbreaks <- collect(tbl(wahis_db(), "outbreak_reports_events"))
outbreaks %>%
arrange(country, disease, immediate_report) %>%
group_by(immediate_report) %>%
mutate(any_na_resolved = any(date_event_resolved == "NA")) %>%
group_by() %>%
filter(any_na_resolved) %>% View
outbreaks <- collect(tbl(wahis_db(), "outbreak_reports_events"))
outbreaks %>%
arrange(country, disease, immediate_report) %>%
group_by(immediate_report) %>%
mutate(any_na_resolved = any(date_event_resolved == "NA")) %>%
group_by() %>%
filter(any_na_resolved)
threads <- outbreaks %>%
mutate_at(.vars = c("date_of_start_of_the_event", "date_event_resolved"), dmy) %>%
select(id, immediate_report, report_type, disease, country,date_of_start_of_the_event, date_event_resolved, reason_for_notification) %>%
arrange(immediate_report, report_type)
threads2 <- threads %>%
group_by(immediate_report, country, disease) %>%
summarize(start = min(date_of_start_of_the_event),
end = if_else(
all(is.na(date_event_resolved)), as.Date(NA),
max(date_event_resolved, na.rm = TRUE)),
reason = reason_for_notification[1]) %>%
arrange(start, country, disease) %>%
mutate(days = interval(start, end) / ddays(1))
ggplot(threads2, aes(x = days, y = fct_reorder(disease, days))) +
geom_density_ridges()
threads %>% count(disease, sort = TRUE)
empres <- collect(tbl(wahis_db(), "empres_outbreaks"))
segs <- threads2 %>%
filter(disease == "Bluetongue", !is.na(days)) %>%
arrange(country, start) %>%
group_by(country) %>%
mutate(tot_days = sum(days, na.rm = TRUE)) %>%
group_by() %>%
mutate(country = fct_reorder(country, tot_days)) %>%
group_by(country) %>%
mutate(n_in_country = n()) %>%
group_by() %>%
mutate(ypos = as.integer(country) + if_else(n_in_country > 1, runif(n(), -0.4, 0.4), 0))
ggplot(segs, aes(x=start, y=country)) +
geom_segment(mapping=aes(y = ypos, yend = ypos, x = start, xend = end)) +
scale_y_continuous(breaks = 1:nlevels(segs$country), labels = levels(segs$country))
library(wahis)
library(tidyverse)
library(stringi)
library(lubridate)
library(ggridges)
outbreaks <- collect(tbl(wahis_db(), "outbreak_reports_events"))
outbreaks %>%
arrange(country, disease, immediate_report) %>%
group_by(immediate_report) %>%
mutate(any_na_resolved = any(date_event_resolved == "NA")) %>%
group_by() %>%
filter(any_na_resolved)
threads <- outbreaks %>%
mutate_at(.vars = c("date_of_start_of_the_event", "date_event_resolved"), dmy) %>%
select(id, immediate_report, report_type, disease, country,date_of_start_of_the_event, date_event_resolved, reason_for_notification) %>%
arrange(immediate_report, report_type)
View(threads)
threads2 <- threads %>%
group_by(immediate_report, country, disease) %>%
summarize(start = min(date_of_start_of_the_event),
end = if_else(
all(is.na(date_event_resolved)), as.Date(NA),
max(date_event_resolved, na.rm = TRUE)),
reason = reason_for_notification[1]) %>%
arrange(start, country, disease) %>%
mutate(days = interval(start, end) / ddays(1))
ggplot(threads2, aes(x = days, y = fct_reorder(disease, days))) +
geom_density_ridges()
threads %>% count(disease, sort = TRUE)
empres <- collect(tbl(wahis_db(), "empres_outbreaks"))
source('~/projects/repel-all/wahis/inst/queries/threads.R', echo=TRUE)
library(wahis)
annual <- collect(tbl(wahis_db(), "annual_reports_animal_diseases"))
library(wahis)
library(tidyverse)
library(stringi)
library(lubridate)
library(ggridges)
annual <- collect(tbl(wahis_db(), "annual_reports_animal_diseases"))
annual <- collect(tbl(wahis_db(), "annual_reports_animal_diseases"))
annual_reports_animal_diseases <- collect(tbl(wahis_db(), "annual_reports_animal_diseases"))
annual %>%
filter(semester != 0) %>%
select(country, report_year, report_semester, disease, status, occurrence, new_outbreaks, total_outbreaks)
annual_reports_animal_diseases <- collect(tbl(wahis_db(), "annual_reports_animal_diseases"))
annual_reports_animal_diseases %>%
filter(semester != "0") %>%
select(country, report_year, report_semester, disease, status, occurrence, new_outbreaks, total_outbreaks)
annual_reports_animal_diseases %>%
filter(report_semester != 0) %>%
select(country, report_year, report_semester, disease, status, occurrence, new_outbreaks, total_outbreaks)
x <- annual_reports_animal_diseases %>%
filter(report_semester != 0) %>%
select(country, report_year, report_semester, disease, status, occurrence, new_outbreaks, total_outbreaks)
x %>% count(status)
x %>% count(status, occurrence)
x <- annual_reports_animal_diseases %>%
filter(report_semester != 0) %>%
select(country, report_year, report_semester, disease, oie_listed, occurrence, occurrence, new_outbreaks, total_outbreaks)
x %>% count(status, occurrence)
x %>% count(occurrence)
x
annual_reports_animal_hosts <- collect(tbl(wahis_db(), "annual_reports_animal_hosts"))
annual_reports_animal_hosts <- collect(tbl(wahis_db(), "annual_reports_animal_hosts"))
annual_reports_animal_hosts %>%
count(species, disease_population)
annual_reports_animal_hosts %>%
count(measuring_units)
annual_reports_animal_hosts %>%
count(species, measuring_units)
annual_reports_animal_hosts %>%
count(species, measuring_units) %>% View
annual_reports_animal_hosts %>%
count(species, measuring_units) %>% filter(measuring_units != "disease_absent")
annual_reports_animal_hosts %>%
count(species, measuring_units) %>% filter(measuring_units != "disease absent")
annual_reports_animal_hosts %>%
count(species, measuring_units) %>% filter(measuring_units != "disease absent") %>% View
xx <- annual_reports_animal_hosts %>%
filter(report_semester != 0) %>%
select(country, report_year, report_semester, disease, species, disease_population,
susceptible, cases, deaths, killed_and_disposed_of, vaccination_in_response_to_the_outbreak)
x %>% count(occurrence)
x <- annual_reports_animal_diseases %>%
filter(report_semester != 0) %>%
select(country, report_year, report_semester, disease, oie_listed, occurrence, new_outbreaks, total_outbreaks)
xx <- annual_reports_animal_hosts %>%
filter(report_semester != 0) %>%
select(country, report_year, report_semester, disease, species, disease_population,
susceptible, cases, deaths, killed_and_disposed_of, vaccination_in_response_to_the_outbreak)
xxx <-
left_join(annual_reports_animal_diseases, annual_reports_animal_hosts,
by = c("country", "report_year", "report_semester", "disease"))
View(xxx)
x <- annual_reports_animal_diseases %>%
filter(report_semester != 0) %>%
select(country, report_year, report_semester, disease, oie_listed, occurrence, new_outbreaks, total_outbreaks)
xx <- annual_reports_animal_hosts %>%
filter(report_semester != 0) %>%
select(country, report_year, report_semester, disease, species, disease_population,
susceptible, cases, deaths, killed_and_disposed_of, vaccination_in_response_to_the_outbreak)
xxx <-
left_join(x, xx,
by = c("country", "report_year", "report_semester", "disease"))
View(tail(xxx, 1000))
source('~/projects/repel-all/wahis/inst/queries/annual.R', echo=TRUE)
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
xxx %>% count(susceptible)
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
xxx %>% count(susceptible, sort = TRUE)
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
xxx %>% filter(is.na(as.integer(susceptible))) %>% count(susceptible, sort = TRUE)
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
xxx %>% filter(is.na(as.integer(susceptible))) %>% count(occurrence, susceptible, sort = TRUE)
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
xxx %>% filter(is.na(as.integer(susceptible))) %>%
count(occurrence, susceptible, sort = TRUE) %>% View
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
xxx %>%
mutate(suscptible_2 = if_else(is.na(as.integer(susceptible)), susceptible, "number")) %>%
count(occurrence, susceptible_2, sort = TRUE) %>% View
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
xxx %>%
mutate(susceptible_2 = if_else(is.na(as.integer(susceptible)), susceptible, "number")) %>%
count(occurrence, susceptible_2, sort = TRUE) %>% View
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
xxx %>%
mutate(cases_2 = if_else(is.na(as.integer(cases)), susceptible, "number")) %>%
count(occurrence, cases_2, sort = TRUE) %>% View
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
xxx %>%
mutate(cases_2 = if_else(is.na(as.integer(cases)), cases, "number")) %>%
count(occurrence, cases_2, sort = TRUE) %>% View
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
xxx %>%
mutate(cases_2 = if_else(is.na(as.integer(cases)), cases, if_else(cases == "0", "zero", "number"))) %>%
count(occurrence, cases_2, sort = TRUE) %>% View
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
xx %>%
mutate(cases_2 = if_else(is.na(as.integer(cases)), cases, if_else(cases == "0", "zero", "number"))) %>%
count(occurrence, cases_2, sort = TRUE) %>% View
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
xx %>%
mutate(cases_2 = if_else(is.na(as.integer(cases)), cases, if_else(cases == "0", "zero", "number"))) %>%
count(occurrence, cases_2, sort = TRUE) %>% View
View(xx)
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
xxx %>%
mutate(cases_2 = if_else(is.na(as.integer(cases)), cases, if_else(cases == "0", "zero", "number"))) %>%
count(occurrence, cases_2, sort = TRUE) %>% View
xxx %>%
filter(occurrence == "Disease absent", as.integer(cases) > 0)
xxx %>%
filter(occurrence == "Disease absent", as.integer(cases) > 0) %>% View
xxx %>% filter(country == "Afghanistan", report_year == "2010", report_semester ==  "2")
xxx %>% filter(country == "Afghanistan", report_year == "2010", report_semester ==  "2") %>% filter
xxx %>% filter(country == "Afghanistan", report_year == "2010", report_semester ==  "2") %>% View
annual_reports_animal_diseases %>% filter(country == "Afghanistan", report_year == "2010", report_semester ==  "2") %>% View
annual_reports_animal_hosts %>% filter(country == "Afghanistan", report_year == "2010", report_semester ==  "2") %>% View
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
# D
xxx %>%
mutate(cases_2 = if_else(is.na(as.integer(cases)), cases, if_else(cases == "0", "zero", "number"))) %>%
count(occurrence, cases_2, sort = TRUE) %>% View
xxx <-
left_join(x, xx,
by = c("country", "report_year", "report_semester", "disease", "disease_population"))
xxx <-
left_join(x, xx,
by = c("country", "report_year", "report_semester", "disease"))
xxx %>% filter(country == "Afghanistan", report_year == "2010", report_semester ==  "2") %>% View
annual_reports_animal_diseases %>% filter(country == "Afghanistan", report_year == "2010", report_semester ==  "2") %>% View
x <- annual_reports_animal_diseases %>%
filter(report_semester != 0) %>%
select(country, report_year, report_semester, disease, oie_listed, occurrence, new_outbreaks, total_outbreaks, disease_population)
xx <- annual_reports_animal_hosts %>%
filter(report_semester != 0) %>%
select(country, report_year, report_semester, disease, species, disease_population,
susceptible, cases, deaths, killed_and_disposed_of, vaccination_in_response_to_the_outbreak)
xxx <-
left_join(x, xx,
by = c("country", "report_year", "report_semester", "disease", "disease_population"))
xxx %>% filter(country == "Afghanistan", report_year == "2010", report_semester ==  "2") %>% View
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers
# D
xxx %>%
mutate(cases_2 = if_else(is.na(as.integer(cases)), cases, if_else(cases == "0", "zero", "number"))) %>%
count(occurrence, cases_2, sort = TRUE) %>% View
xxx %>% filter(occurrence == "Never Reported", !is.na(as.integer(cases)))
xxx %>% filter(occurrence == "Never reported", !is.na(as.integer(cases)))
xxx %>% filter(occurrence == "Never reported", !is.na(as.integer(cases))) %>% View
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers --> override never reported
xxx %>%
mutate(cases_2 = if_else(is.na(as.integer(cases)), cases, if_else(cases == "0", "zero", "number"))) %>%
count(occurrence, cases_2, sort = TRUE) %>% View
xxx %>% filter(occurrence == "Suspected", !is.na(as.integer(cases))) %>% View
# QA / data fixes
# measuring units appropriate to species (hives / cattle)
# Never reported / absent with case numbers --> override never reported
# generate a simplified status field:
xxx %>%
mutate(cases_2 = if_else(is.na(as.integer(cases)), cases, if_else(cases == "0", "zero", "number"))) %>%
count(occurrence, cases_2, sort = TRUE) %>% View
xxx %>% count(disease, occurrence, disease_population)
xxx %>% count(occurrence, disease_population)
xxx %>% count(occurrence, disease_population) %>% View
xxx %>%
mutate(cases_2 = if_else(is.na(as.integer(cases)), cases, if_else(cases == "0", "zero", "number"))) %>%
count(occurrence, cases_2, sort = TRUE) %>% View
xxx %>% count(occurrence, disease_population) %>% View
xxx %>% filter(disease_population == "domestic and wild", occurrence == "Disease present")
xxx %>% filter(disease_population == "domestic and wild", occurrence == "Disease present") %>% View
xxx %>% filter(disease_population == "domestic and wild", occurrence == "Disease present") %>%
count(species)
xxx %>% filter(disease_population == "domestic and wild", occurrence == "Disease present") %>%
count(disease, species)
xxx %>% filter(disease_population == "domestic and wild", occurrence == "Disease present") %>%
count(disease, species) %>% view
xxx %>% filter(disease_population == "domestic and wild", occurrence == "Disease present") %>%
group_by(country, report_year, report_semester, disease) %>%
summarize(any(species == "wildlife"))
xxx %>% filter(disease_population == "domestic and wild", occurrence == "Disease present") %>%
group_by(country, report_year, report_semester, disease) %>%
summarize(w = any(species == "wildlife"))
xxx %>% filter(disease_population == "domestic and wild", occurrence == "Disease present") %>%
group_by(country, report_year, report_semester, disease) %>%
summarize(w = any(species == "wildlife")) %>% count(w)
xxx %>% filter(disease_population == "domestic and wild", occurrence == "Disease present") %>%
group_by(country, report_year, report_semester, disease) %>%
summarize(w = any(species == "wildlife")) %>%
ungroup() %>% count(w)
xxx %>% filter(disease_population == "domestic and wild", occurrence == "Disease present") %>% View
xxx %>% filter(disease_population == "domestic and wild", occurrence == "Disease present",
!is.na(as.integer(cases))) %>% View
outbreak_report_outbreaks <- collect(tbl(wahis_db(), "outbreak_report_outbreaks"))
outbreak_report_outbreaks <- collect(tbl(wahis_db(), "outbreak_reports_outbreaks"))
outbreak_reports_outbreaks <- collect(tbl(wahis_db(), "outbreak_reports_outbreaks"))
View(outbreak_reports_outbreaks)
outbreak_reports_outbreaks %>% count(outbreak_status)
outbreak_reports_outbreaks %>% count(outbreak_status) %>% tail
outbreaks %>% filter(stri_detect_fixed(nature_of_diagnosis, "Suspicion"))
outbreaks <- collect(tbl(wahis_db(), "outbreak_reports_events"))
outbreaks %>% filter(stri_detect_fixed(nature_of_diagnosis, "Suspicion"))
outbreaks %>% filter(stri_detect_fixed(nature_of_diagnosis, "Suspicion")) %>% View
